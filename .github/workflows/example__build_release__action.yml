#################################################################
# Prototype to demonstrate running a build release
#################################################################

name: Build and Run Tests

#on:
#  push:
#    # Only trigger on branch unit_testing_with_github_actions
#    branches: [unit_testing_with_github_actions]
    # Only trigger when a tag with the prefix "rel" is provided
    #
    # Example (triggering the build):
    # git tag rel123
    # git push origin rel123
    #
    # Example (will not trigger build):
    # git tag v123
    # git push origin v123
on:
  push:
    branches: [unit_testing_with_github_actions]

#on:
#  create:
#    tags:
#    - 'rel*'

jobs:
  gradle:
    env:
      java_version: 17
    strategy:
      matrix:
          # the following defines different platforms to target for different actions
          # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: unit_testing_with_github_actions

      - name: Set up JDK ${{ env.java_version }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ env.java_version }}'
          distribution: oracle
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/gradle-wrapper.properties') }} # key for this gradle instance in cache
          restore-keys: | # keys to use in case the provided key doesn't hit the cache
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

#      - name: Validate Gradle Wrapper
#        uses: gradle/wrapper-validation-action@v1
#
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: bootJar
          gradle-version: 8.0.2

#      - name: Get semantic tag version and release notes from commit messages
#        id: tag
#        run: |
#          curtag=${GITHUB_REF_NAME}
#          major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
#          patch=$(echo "$curtag" | cut -d'.' -f3)
#          # avoid empty patch number
#          [ -n "$patch" ] && ((patch--)) || patch=".x"
#          prevtag="${major_minor}.${patch}"
#          echo "" > body.log
#          if git tag | grep $prevtag ; then
#            git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
#          else
#            git log --pretty="- %s" -q --no-color >> body.log
#          fi
#          line_count=$(cat body.log | wc -l)
#          echo "curtag=$curtag" >> $GITHUB_OUTPUT
#          echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
#          echo "line_count=$line_count" >> $GITHUB_OUTPUT

      # https://github.com/ncipollo/release-action

      - name: check_outputs
        run: ls

#      - uses: ncipollo/release-action@v1
#        with:
#          name: ${{ env.GITHUB_REF_NAME }}
#          tag: ${{ env.GITHUB_REF_NAME }}
#          artifacts: "build/libs/leap_cli.jar"
##          bodyFile: "body.log"
#          token: ${{ secrets.GITHUB_TOKEN }}
