package command
// This is the class that is being generated by the plugin for the command "process"
// It is generated in the file "ProcessCmdv1.kt" in the same package as the original class
// The original class is "ProcessCmd.kt" in the same package
// This will leverage the Centralized Service for accessing the Repository Information.
import common.services.auth.AuthService
import org.springframework.stereotype.Component
import picocli.CommandLine
import java.util.concurrent.Callable

import common.services.TaxonomyInfoService
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.ComponentScan
import java.io.File

//@Component
@CommandLine.Command(
    name = "process",
    aliases = ["proc", "repository", "repo"],
    mixinStandardHelpOptions = true,
)
@Component
@ComponentScan(basePackages = ["common"])
class ProcessCmdv1(
    private val taxonomyServiceObj: TaxonomyInfoService,
    private val authServiceObj: AuthService,

//    @Value("\${cliclient.taxonomyProject}")
//    private val TAXONOMYPROJECT: String = "AllLeap+TaxonomyBootcamp123",
//    @Value("\${cliclient.taxonomyBranch}")
//    private val TAXONOMYBRANCH: String = "master123"
) : Callable<Int> {
    @CommandLine.Option(
        names = ["-l", "--listofProcesses", "--list"],
        description = ["Display the list of owned Repositories(a.k.a Process)."]
    )
    var listofProcesses = false


    @CommandLine.Option(
        names = ["-j", "--jsonschema"],
        description = ["Get the JSON Schema of the Repository ID"]
    )
    var jsonschema = false

    @CommandLine.Option(
        names = ["-d", "--dir"],
        description = ["Store the JSON Schema of the Repository ID in a directory"]
    )
    var dir:String? = null

    @CommandLine.Option(
        names = ["-r", "--repo"],
        description = ["Repository ID"]
    )
    var repoId: String? = null

    @CommandLine.ParentCommand
    val parent: EnigmaCommand? = null


    override fun call(): Int {
        parent?.let { it ->
            if (it.token?.length?.compareTo(0) ?:  0  > 0){
                parent?.token?.let { it -> authServiceObj.setAuthToken(it) }
            } }
        when {
            listofProcesses -> {
//                val webgmeToken = getWebGMEToken()
                println("=============================================")
                var result: Any = Any()
//                taxonomyServiceObj.initTaxonomyInfoService("AllLeap+TaxonomyBootcamp", "master")
//                taxonomyServiceObj.initTaxonomyInfoService(TAXONOMYPROJECT, TAXONOMYBRANCH)
                taxonomyServiceObj.initTaxonomyInfoService()
                result = taxonomyServiceObj.getListofRepositories() as HashMap<*, *>
                println("=====================================================================")
                println("Repository ID                         | Content Type | Description")
                println("=====================================================================")
                if (result is HashMap<*, *>) {
                    result.forEach { (key, value) ->
                        value as List<*>
                        value.forEach {
                            (it as Pair<* , *> )
                                println("${it.first}  |  " + key.toString() + "  |  ${it.second} ")
                        }
                    }
                }
                println("=============================================")
            }
            jsonschema -> {
                if (repoId != null) {

                    println("=============================================")
                    var result: Any = Any()
                    taxonomyServiceObj.initTaxonomyInfoService()
                    result = taxonomyServiceObj.getContentTypeJsonSchema(repoId!!)
                    // Store this in a file in the directory specified or in the current directory if not specified
                    dir?.let {
                        File(it).mkdirs()
                        File(it + "/" + repoId + ".json").writeText(result.toString())
                    } ?: File(repoId + ".json").writeText(result.toString())
                    println("=====================================================================")

                }
                else
                    println("Please specify the Repository ID")

            }

            else -> 0
        }
        return 0
    }





}